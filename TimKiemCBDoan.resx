<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAgBAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC/QEAEvFpSQbxaU0S8Vk9EvFZPRLxW
        T0S4U0tEuFNLRLhTR0S4T0dEtE9HRLRPRES0S0REtEtERLBHRESwR0BEsEdARLBEQEStRDxErUQ8RK1D
        O0G/QEAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAL9dVYS/W1P/vlpS/71Z
        Uf+8V1D/u1ZO/7pVTf+5U0z/uFJL/7dRSf+2T0j/tU5H/7VNRf+0TET/s0pD/7JJQv+xSED/sEY//69F
        Pv+uRD3/rUI7/61BO4IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwV5WqcBd
        Vf+/W1P/vlpS/71ZUf+8V1D/u1ZO/7pVTf+5U0z/uFJL/8uIhP/MiIT/tU5H/7VNRf+0TET/s0pD/7JJ
        Qv+xSED/sEY//69FPv+uRD3/rkI7qQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AADCX1aOwV5W/8BdVf+/W1P/vlpS/71ZUf+8V1D/u1ZO/7pVTf/Yop3/rEI7/6xCO//Xn5v/tU5H/7VN
        Rf+0TET/s0pD/7JJQv+xSED/sEY//69FPv+vQzyMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        AD/+AAB//wAA//+AAf//8A////////////8=
</value>
  </data>
</root>